@using Stl.Fusion.Authentication
@inject BlazorModeHelper BlazorModeHelper
@inject ClientAuthHelper ClientAuthHelper
@inject NavigationManager Navigator
@inject IAccountService AccountService
@inject Session _session

@{
    var signInOrAddFormat = User.IsAuthenticated ? "Add {0} account" : "Sign in with {0}";
    var signInIconName = User.IsAuthenticated ? FontAwesomeIcons.Plus : FontAwesomeIcons.SignInAlt;
}

<BarDropdown Class="@CssClass">
    <BarDropdownToggle>
        @if (User.IsAuthenticated) {
            <Blazorise.Icon Name="FontAwesomeIcons.UserCircle" IconStyle="@IconStyle.Solid" />
        }
        else {
            <Blazorise.Icon Name="FontAwesomeIcons.UserCircle" />
        }
        <span class="pl-1">@User.Name</span>
    </BarDropdownToggle>
    <BarDropdownMenu>
        <AuthorizeView>
            <NotAuthorized>
                <BarDropdownItem Clicked="@(_ => Navigator.NavigateTo("login"))">
                    <Blazorise.Icon Name="FontAwesomeIcons.SignInAlt" />
                    Sign in
                </BarDropdownItem>
                <BarDropdownItem Clicked="@(_ => Navigator.NavigateTo("registerCustomer"))">
                    <Blazorise.Icon Name="FontAwesomeIcons.Registered" />
                    Register
                </BarDropdownItem>
            </NotAuthorized>
            <Authorized>
                <BarDropdownItem Clicked="@(_ => AccountService.SignOut(_session))">
                    <Blazorise.Icon Name="FontAwesomeIcons.SignOutAlt" />
                    Sign out
                </BarDropdownItem>
            </Authorized>
        </AuthorizeView>
    </BarDropdownMenu>
</BarDropdown>

@code {
    [Parameter]
    public string CssClass { get; set; } = "";
    [CascadingParameter]
    private Task<AuthState> AuthStateTask { get; set; } = null!;
    private AuthState AuthState { get; set; } = new(new User("")); // For SSB pre-render
    private User User => AuthState.User;

    protected override async Task OnParametersSetAsync()
        => AuthState = await AuthStateTask;
}
